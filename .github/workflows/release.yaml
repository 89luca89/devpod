name: Publish release
on:
  release:
    types: [prereleased]

jobs:
  create-release:
    if: startsWith(github.ref, 'refs/tags/v') == true
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      package_version: ${{ steps.get-version.outputs.package_version }}
      release_id: ${{ steps.get-release.outputs.id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - run: npm install semver

      - name: Get Version
        uses: actions/github-script@v6
        id: get-version
        with:
          script: |
            const semver = require("semver")
            const refName = `${process.env.GITHUB_REF_NAME}`
            let version = refName.split("v")[1]
            const parsed = semver.parse(version);
            const supportedPreleases = [
              { tag: "alpha", number: 1 },
              { tag: "beta", number: 2 },
              { tag: "rc", number: 3 },
            ];
            const maybePrelease = semver.prerelease(version);
            const maybeSupported = supportedPreleases.find(
              (p) => p.tag === maybePrelease?.[0]
            );

            // If we have a prelease and it is in the supported range, then we can use it
            if (maybePrelease && maybeSupported) {
              version = `${parsed.major}.${parsed.minor}.${parsed.patch}-${
                maybeSupported.number
              }${maybePrelease[1] ?? 0}`;
            }

            if(maybePrelease && !maybeSupported) {
              core.setFailed(`Unsupported prerelease: ${version}`)
            }

            core.info(`Version: ${version}`)
            core.setOutput("package_version", version)

      - name: Get Release
        uses: actions/github-script@v6
        id: get-release
        with:
          script: |
            // Find the prerelease release in our repo that triggered this workflow

            const res = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 5,
            })
            const release = res.data.find((r) => r.prerelease)
            if(!release) { core.setFailed("Unable to find prerelease for this workflow") }

            core.setOutput("id", release.id)

  build-app:
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v') == true
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            os: linux
            arch: amd64
            cli_only: false
    name: ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    env:
      GO111MODULE: on
      GOFLAGS: -mod=vendor

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Apply Version
        if: matrix.settings.cli_only == false
        run: yarn version --new-version ${{ needs.create-release.outputs.package_version }} --no-git-tag-version
        working-directory: "./desktop"

      - name: Setup System Dependencies
        if: matrix.settings.host == 'ubuntu-latest' && matrix.settings.cli_only == false
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        if: matrix.settings.cli_only == false
        with:
          targets: ${{ matrix.settings.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        if: matrix.settings.cli_only == false
        with:
          workspaces: "./desktop/src-tauri -> target"

      - name: Go setup
        uses: actions/setup-go@v2
        with:
          go-version: 1.19

      - name: Build Sidecar CLI
        if: matrix.settings.host != 'windows-latest'
        run: |
          BIN_NAME=devpod-cli-${{ matrix.settings.target }}
          GOOS=${{ matrix.settings.os }} GOARCH=${{ matrix.settings.arch }} CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/loft-sh/devpod/pkg/version.version="v${{ needs.create-release.outputs.package_version }}"" -o "test/$BIN_NAME"
          cp "test/$BIN_NAME" "desktop/src-tauri/bin/$BIN_NAME"
          ls desktop/src-tauri/bin

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        if: matrix.settings.cli_only == false
        with:
          node-version: "lts/*"
          cache: "yarn"
          cache-dependency-path: "./desktop/yarn.lock"

      - name: Install frontend dependencies
        if: matrix.settings.cli_only == false
        run: yarn install
        working-directory: "./desktop"

      - name: Build Desktop App
        if: matrix.settings.host == 'ubuntu-latest' && matrix.settings.cli_only == false
        uses: tauri-apps/tauri-action@v0.4.0
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          projectPath: "./desktop"
          args: "--config src-tauri/tauri-dev.conf.json --config src-tauri/tauri-linux.conf.json --target ${{ matrix.settings.target }}"

      - name: Build RPM
        if: matrix.settings.host == 'ubuntu-latest' && matrix.settings.cli_only == false
        id: build-desktop-rpm
        run: |
          cd ./desktop/src-tauri/target/${{ matrix.settings.target }}/release/bundle/deb/ || exit 1

          sudo apt-get update
          sudo apt-get install -y alien rpm
          # Cleanup
          rm -rf "dev-pod-${{needs.create-release.outputs.package_version}}"
          rm -f "*.rpm"

          # Convert deb to rpm
          alien -r -g -k -v "dev-pod_${{needs.create-release.outputs.package_version}}_amd64.deb"

          DEPENDENCIES="
            libappindicator-gtk3
            gdk-pixbuf2
            libbsd
            libXdmcp
            libwmf
            libdeflate
            gtk3-immodules
          "
          rpm_version="$(echo ${{needs.create-release.outputs.package_version}} | cut -d'-' -f1)"
          # Rename spec file
          ls -l
          mv dev-pod-${rpm_version}/dev-pod-${{needs.create-release.outputs.package_version}}-*.spec dev-pod-${rpm_version}/dev-pod-${rpm_version}.spec
          # Inject missing dependencies
          for dependency in ${DEPENDENCIES}; do
            sed -i "s|Group: Converted/unknown|Group: Converted/unknown\nRequires: ${dependency}|g" "dev-pod-${rpm_version}/dev-pod-${rpm_version}.spec"
          done

          # Remove unwanted dirs
          sed -i 's|^"/usr"$||g' "dev-pod-${rpm_version}/dev-pod-${rpm_version}.spec"
          sed -i 's|^"/usr/bin"$||g' "dev-pod-${rpm_version}/dev-pod-${rpm_version}.spec"

          cd "dev-pod-${rpm_version}" || exit 1
          rpmbuild --target=x86_64 --buildroot "$(pwd)" -bb "$(pwd)/dev-pod-${rpm_version}.spec"

          cd -
          mv dev-pod-${{needs.create-release.outputs.package_version}}-*.x86_64.rpm dev-pod-${{needs.create-release.outputs.package_version}}.x86_64.rpm
